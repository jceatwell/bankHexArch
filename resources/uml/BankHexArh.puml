@startuml
namespace app {
    class CustomerHandlers << (S,Aquamarine) >> {
        - service service.CustomerService

        - getAllCustomers(w http.ResponseWriter, r *http.Request) 

        + GetCustomer(w http.ResponseWriter, r *http.Request) 

    }
}


namespace domain {
    class Customer << (S,Aquamarine) >> {
        + Id string
        + Name string
        + City string
        + Zipcode string
        + DateOfBirth string
        + Status string

    }
    interface CustomerRepository  {
        + FindAll() ([]Customer, error)
        + ById( string) (*Customer, error)

    }
    class CustomerRepositoryDb << (S,Aquamarine) >> {
        - client *sql.DB

        + FindAll() ([]Customer, error)
        + ById(id string) (*Customer, error)

    }
    class CustomerRepositoryStub << (S,Aquamarine) >> {
        - customers []Customer

        + FindAll() ([]Customer, error)

    }
}

"domain.CustomerRepository" <|-- "domain.CustomerRepositoryDb"

namespace service {
    interface CustomerService  {
        + GetAllCustomer() ([]domain.Customer, error)
        + GetCustomer( string) (*domain.Customer, error)

    }
    class DefaultCustomerService << (S,Aquamarine) >> {
        - repo domain.CustomerRepository

        + GetAllCustomer() ([]domain.Customer, error)
        + GetCustomer(id string) (*domain.Customer, error)

    }
}

"service.CustomerService" <|-- "service.DefaultCustomerService"

@enduml
