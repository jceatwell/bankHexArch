@startuml
namespace app {
    class AccountHandler << (S,Aquamarine) >> {
        - service service.AccountService

        + NewAccount(w http.ResponseWriter, r *http.Request) 
        + MakeTransaction(w http.ResponseWriter, r *http.Request) 

    }
    class CustomerHandlers << (S,Aquamarine) >> {
        - service service.CustomerService

        - getAllCustomers(w http.ResponseWriter, r *http.Request) 

        + GetCustomer(w http.ResponseWriter, r *http.Request) 

    }
}


namespace domain {
    class Account << (S,Aquamarine) >> {
        + AccountId string
        + CustomerId string
        + OpeningDate string
        + AccountType string
        + Amount float64
        + Status string

        + ToNewAccountResponseDto() dto.NewAccountResponse
        + CanWithdraw(amount float64) bool

    }
    interface AccountRepository  {
        + Save( Account) (*Account, *errs.AppError)
        + SaveTransaction(transaction Transaction) (*Transaction, *errs.AppError)
        + FindBy(accountId string) (*Account, *errs.AppError)

    }
    class AccountRepositoryDb << (S,Aquamarine) >> {
        - client *sqlx.DB

        + Save(a Account) (*Account, *errs.AppError)
        + SaveTransaction(t Transaction) (*Transaction, *errs.AppError)
        + FindBy(accountId string) (*Account, *errs.AppError)

    }
    class Customer << (S,Aquamarine) >> {
        + Id string
        + Name string
        + City string
        + Zipcode string
        + DateOfBirth string
        + Status string

        - statusAsText() string

        + ToDto() dto.CustomerResponse

    }
    interface CustomerRepository  {
        + FindAll(status string) ([]Customer, *errs.AppError)
        + ById( string) (*Customer, *errs.AppError)

    }
    class CustomerRepositoryDb << (S,Aquamarine) >> {
        - client *sqlx.DB

        + FindAll(status string) ([]Customer, *errs.AppError)
        + ById(id string) (*Customer, *errs.AppError)

    }
    class CustomerRepositoryStub << (S,Aquamarine) >> {
        - customers []Customer

        + FindAll() ([]Customer, error)

    }
    class Transaction << (S,Aquamarine) >> {
        + TransactionId string
        + AccountId string
        + Amount float64
        + TransactionType string
        + TransactionDate string

        + IsWithdrawal() bool
        + ToDto() dto.TransactionResponse

    }
}

"domain.AccountRepository" <|-- "domain.AccountRepositoryDb"
"domain.CustomerRepository" <|-- "domain.CustomerRepositoryDb"

namespace dto {
    class CustomerResponse << (S,Aquamarine) >> {
        + Id string
        + Name string
        + City string
        + Zipcode string
        + DateOfBirth string
        + Status string

    }
    class NewAccountRequest << (S,Aquamarine) >> {
        + CustomerId string
        + AccountType string
        + Amount float64

        + Validate() *errs.AppError

    }
    class NewAccountResponse << (S,Aquamarine) >> {
        + AccountId string

    }
    class TransactionRequest << (S,Aquamarine) >> {
        + AccountId string
        + Amount float64
        + TransactionType string
        + TransactionDate string
        + CustomerId string

        + IsTransactionTypeWithdrawal() bool
        + IsTransactionTypeDeposit() bool
        + Validate() *errs.AppError

    }
    class TransactionResponse << (S,Aquamarine) >> {
        + TransactionId string
        + AccountId string
        + Amount float64
        + TransactionType string
        + TransactionDate string

    }
}


namespace errs {
    class AppError << (S,Aquamarine) >> {
        + Code int
        + Message string

        + AsMessage() *AppError

    }
}


namespace service {
    interface AccountService  {
        + NewAccount( dto.NewAccountRequest) (*dto.NewAccountResponse, *errs.AppError)
        + MakeTransaction( dto.TransactionRequest) (*dto.TransactionResponse, *errs.AppError)

    }
    interface CustomerService  {
        + GetAllCustomer( string) ([]dto.CustomerResponse, *errs.AppError)
        + GetCustomer( string) (*dto.CustomerResponse, *errs.AppError)

    }
    class DefaultAccountService << (S,Aquamarine) >> {
        - repo domain.AccountRepository

        + NewAccount(req dto.NewAccountRequest) (*dto.NewAccountResponse, *errs.AppError)
        + MakeTransaction(req dto.TransactionRequest) (*dto.TransactionResponse, *errs.AppError)

    }
    class DefaultCustomerService << (S,Aquamarine) >> {
        - repo domain.CustomerRepository

        + GetAllCustomer(status string) ([]dto.CustomerResponse, *errs.AppError)
        + GetCustomer(id string) (*dto.CustomerResponse, *errs.AppError)

    }
}

"service.AccountService" <|-- "service.DefaultAccountService"
"service.CustomerService" <|-- "service.DefaultCustomerService"

@enduml
